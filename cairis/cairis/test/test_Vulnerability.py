#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

import unittest
import os
import json
import BorgFactory
from Borg import Borg
from VulnerabilityParameters import VulnerabilityParameters
from ARM import DatabaseProxyException

class VulnerabilityTest(unittest.TestCase):

  def setUp(self):
    BorgFactory.initialise()
    f = open(os.environ['CAIRIS_SRC'] + '/test/vulnerabilities.json')
    d = json.load(f)
    f.close()
    self.iVuln = d['vulnerabilities']

    
  def testStandardVulnerability(self):
    iVuln1 = VulnerabilityParameters(self.iVuln[0]["theName"],self.iVuln[0]["theType"],self.iVuln[0]["theDescription"],self.iVuln[0]["theEnvironmentProperties"][0][0],self.iVuln[0]["theEnvironmentProperties"][0][1])
    iVuln2 = VulnerabilityParameters(self.iVuln[1]["theName"],self.iVuln[1]["theType"],self.iVuln[1]["theDescription"],self.iVuln[1]["theEnvironmentProperties"][0][0],self.iVuln[1]["theEnvironmentProperties"][0][1])
    iVuln3 = VulnerabilityParameters(self.iVuln[2]["theName"],self.iVuln[2]["theType"],self.iVuln[2]["theDescription"],self.iVuln[2]["theEnvironmentProperties"][0][0],self.iVuln[2]["theEnvironmentProperties"][0][1])
    b = Borg()
    b.dbProxy.addVulnerability(iVuln1)
    b.dbProxy.addVulnerability(iVuln2)
    b.dbProxy.addVulnerability(iVuln3)
    oVuln = b.dbProxy.getVulnerabilities()
    oVuln1 = oVuln[self.iVuln[0]["theName"]]
    self.assertEqual(iVuln1.name(), oVuln1.name())
    self.assertEqual(iVuln1.theType(),oVuln1.theType())
    self.assertEqual(iVuln1.description(),oVuln1.description())
    self.assertEqual(iVuln1.theEnvironmentProperties()[0][0],oVuln1.theEnvironmentProperties()[0][0])
    self.assertEqual(iVuln1.theEnvironmentProperties()[0][1],oVuln1.theEnvironmentProperties()[0][1])
    oVuln2 = oVuln[self.iVuln[1]["theName"]]
    self.assertEqual(iVuln2.name(), oVuln2.name())
    self.assertEqual(iVuln2.theType(),oVuln2.theType())
    self.assertEqual(iVuln2.description(),oVuln2.description())
    self.assertEqual(iVuln2.theEnvironmentProperties()[0][0],oVuln2.theEnvironmentProperties()[0][0])
    self.assertEqual(iVuln2.theEnvironmentProperties()[0][1],oVuln2.theEnvironmentProperties()[0][1])
    oVuln3 = oVuln[self.iVuln[2]["theName"]]
    self.assertEqual(iVuln3.name(), oVuln3.name())
    self.assertEqual(iVuln3.theType(),oVuln3.theType())
    self.assertEqual(iVuln3.description(),oVuln3.description())
    self.assertEqual(iVuln3.theEnvironmentProperties()[0][0],oVuln3.theEnvironmentProperties()[0][0])
    self.assertEqual(iVuln3.theEnvironmentProperties()[0][1],oVuln3.theEnvironmentProperties()[0][1])
    b.dbProxy.deleteVulnerability(oVuln1.id())
    b.dbProxy.deleteVulnerability(oVuln2.id())
    b.dbProxy.deleteVulnerability(oVuln3.id())

  def tearDown(self):
    b = Borg()
    b.dbProxy.close()

if __name__ == '__main__':
  unittest.main()
